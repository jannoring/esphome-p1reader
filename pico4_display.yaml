substitutions:
  device_name: rpi-pico4
  #device_description: "P1 module to read smart meter"

esphome:
  name: ${device_name}

rp2040:
  board: rpipicow
  framework:
    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

wifi:
  ssid:  !secret wifi_ssid
  password:  !secret wifi_password
  fast_connect: True
  power_save_mode: NONE
# Optional manual IP
  manual_ip:
    static_ip: !secret ip_pico4
    gateway: !secret ip_gw
    subnet: !secret ip_subnet
    dns1: !secret ip_dns1
    dns2: !secret ip_dns2

# Enable logging
logger:
  level: DEBUG
  #baud_rate: 0 # disable logging over uart
  
# Enable Home Assistant API
api:

  # encryption:
  #   key: !secret encryption_key
    
ota:
  password: !secret ota_password

# uart:
#   id: uart_0
#   tx_pin: 
#     number: 0
#   rx_pin:
#     number: 1
#     #inverted: true
#   baud_rate: 115200

# dallas:
#   - pin: 16

sensor:
- platform: uptime
  name: ${device_name}  Uptime
- platform: wifi_signal
  name: ${device_name}  Wi-Fi Signal
  update_interval: 60s
- platform: homeassistant
  entity_id: sensor.load_power
  id: load_power
- platform: homeassistant
  entity_id: sensor.total_dc_power
  id: dc_power
- platform: homeassistant
  entity_id: sensor.outdoor
  id: outdoor_temp

binary_sensor:
- platform: homeassistant
  entity_id: binary_sensor.garage_open
  id: garage_open
- platform: homeassistant
  entity_id: binary_sensor.huvudentre_open
  id: entre_open
- platform: gpio
  id: pb3
  name: pb3
  pin:
    number: GPIO12
    inverted: true
    mode:
      input: true
      pullup: true
  filters:
    - delayed_off: 10ms
- platform: gpio
  id: pb1
  name: pb1
  pin:
    number: GPIO13
    inverted: true
    mode:
      input: true
      pullup: true
  filters:
    - delayed_off: 10ms
  
display:
  - platform: lcd_gpio
    dimensions: 20x4
    data_pins:
      - GPIO18
      - GPIO19
      - GPIO20
      - GPIO21
    enable_pin: GPIO17
    rs_pin: GPIO16
    rw_pin: GPIO15
    lambda: |-
      it.strftime(0,0,"%H:%M", id(my_time).now());
      it.printf(6,0, "g%s%s e%s%s", id(garage_open).state ? "O" : "C",id(sensor_garage_lock).state=="locked" ? "L" : "U", id(entre_open).state ? "O" : "C", id(sensor_huvudentre_lock).state=="locked" ? "L" : "U");
      it.printf(0,1,"%.0fW %.0fW %.1fC", id(load_power).state, id(dc_power).state, id(outdoor_temp).state);
time:
- platform: homeassistant
  id: my_time

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name} IP Address
    ssid:
      name: ${device_name} Wi-Fi SSID
    bssid:
      name: ${device_name} Wi-Fi BSSID
  - platform: version
    name: ${device_name} ESPHome Version
    hide_timestamp: false
  - platform: homeassistant
    entity_id: lock.garage
    id: sensor_garage_lock
  - platform: homeassistant
    entity_id: lock.huvudentre
    id: sensor_huvudentre_lock        

switch:
  - platform: gpio
    pin:
      number: GPIO10
      mode: output
    id: redLED1
  - platform: gpio
    pin:
      number: GPIO11
      mode: output
    id: redLED2

#interval:
  # - interval: 500ms
  #   then:
  #     - switch.toggle: redLED1
  # - interval: 1s
  #   then:
  #     - switch.toggle: redLED2