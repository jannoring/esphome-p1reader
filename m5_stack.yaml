substitutions:
  device_name: m5-stack
  node_platform: ESP32
  board: m5stack-core-esp32
  #device_description: "P1 module to read smart meter"

esphome:
  name: ${device_name}
  on_boot:
    then:
      - light.turn_on:
          id: back_light
          brightness: 40%

esp32:
  board: ${board}
  framework:
    type: arduino

wifi:
  ssid:  !secret wifi_ssid
  password:  !secret wifi_password
  fast_connect: True
# Optional manual IP
  manual_ip:
    static_ip: !secret ip_m5stack
    gateway: !secret ip_gw
    subnet: !secret ip_subnet
    dns1: !secret ip_dns1
    dns2: !secret ip_dns2

# Enable logging
logger:
  level: ERROR
  #baud_rate: 0 # disable logging over uart
  
# Enable Home Assistant API
api:

  # encryption:
  #   key: !secret encryption_key
    
ota:
  password: !secret ota_password

globals:
  - id: icon_pos
    type: int
    restore_value: no
    initial_value: '125'



# Define I/O: UART, I²C and SPI
# uart:
#   rx_pin: 16
#   baud_rate: 9600

# i2c:
#   sda: 21
#   scl: 22
#   scan: true
#   frequency: 200kHz

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

# Download Roboto font from https://fonts.google.com/specimen/Roboto
font:
  - file: "gfonts://Roboto@medium"
    id: font_roboto_medium22
    size: 22
    glyphs: '!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/³µ'

color:
  - id: RED
    red: 100%
    green: 0%
    blue: 0%
  - id: BLUE
    red: 0%
    green: 0%
    blue: 100%
  - id: GREEN
    red: 0%
    green: 100%
    blue: 0%    
  - id: WHITE
    red: 100%
    green: 100%
    blue: 100%
  - id: YELLOW
    red: 100%
    green: 100%
    blue: 0%

display:
  - platform: ili9xxx
    id: m5stack_display
    model: m5stack
    cs_pin: 14
    dc_pin: 27
    reset_pin: 33
    rotation: 0
    pages:
      - id: page1
        lambda: |-
          // Draw the graph at position [x=10,y=20]
          it.graph(30, 30, id(load_graph), BLUE);
      - id: page2
        lambda: |-
          it.strftime(10, 11, id(font_roboto_medium22), RED, TextAlign::LEFT, "%H:%M", id(my_time).now());
          it.printf(10, 31, id(font_roboto_medium22), RED, TextAlign::LEFT, "g%s%s e%s%s", id(garage_open).state ? "O" : "C",id(sensor_garage_lock).state=="locked" ? "L" : "U", id(entre_open).state ? "O" : "C", id(sensor_huvudentre_lock).state=="locked" ? "L" : "U");
          it.printf(10, 51, id(font_roboto_medium22), RED, TextAlign::LEFT, "%.0fW", id(load_power).state);
          it.printf(10, 71, id(font_roboto_medium22), GREEN, TextAlign::LEFT, "%.0fW", id(dc_power).state);
          it.printf(10, 91, id(font_roboto_medium22), RED, TextAlign::LEFT, "%.1fC", id(outdoor_temp).state);
          if (id(garage_open).state) {
            it.image(id(icon_pos), 110, id(door_open), id(BLUE), id(BLUE));
          } else if (id(sensor_garage_lock).state=="locked") {
            it.image(id(icon_pos), 110, id(lock_lock), id(GREEN), id(BLUE));
          } else {
            it.image(id(icon_pos), 110, id(lock_open), id(RED), id(BLUE));
          }
          if (id(entre_open).state) {
            it.image(id(icon_pos)+98, 110, id(door_open), id(BLUE), id(BLUE));
          } else if (id(sensor_huvudentre_lock).state=="locked") {
            it.image(id(icon_pos)+98, 110, id(lock_lock), id(GREEN), id(BLUE));
          } else {
            it.image(id(icon_pos)+98, 110, id(lock_open), id(RED), id(BLUE));
          }
          it.printf(id(icon_pos), 191, id(font_roboto_medium22), BLUE, TextAlign::LEFT, "Garage");
          it.printf(id(icon_pos)+105, 191, id(font_roboto_medium22), BLUE, TextAlign::LEFT, "Entre");

image:
  - file: mdi:lock-open-variant-outline
    id: lock_open
    resize: 80x80
  - file: mdi:lock
    id: lock_lock
    resize: 80x80
  - file: mdi:door-open
    id: door_open
    resize: 80x80

# |-
# Color RED(1,0,0);
# Color BLUE(0,0,1);
# Color WHITE(1,1,1);
# it.rectangle(0,  0, it.get_width(), it.get_height(), BLUE);
# it.rectangle(0, 22, it.get_width(), it.get_height(), BLUE);
# it.print(it.get_width() / 2, 11, id(font_roboto_medium22), RED, TextAlign::CENTER, "Testing");

# GPIO pin of the display backlight

graph:
  # Show multi-trace graph
  - id: load_graph
    duration: 1h
    # x_grid: 10min
    # y_grid: 1.0     # degC/div
    width: 200
    height: 200
    traces:
      - sensor: load_power
        line_type: SOLID
        line_thickness: 2
        color: RED
      - sensor: dc_power
        line_type: SOLID
        line_thickness: 3
        color: YELLOW
      # - sensor: my_beer_temperature
      #   line_type: DOTTED
      #   line_thickness: 2
      #   color: my_green

output:
  - platform: ledc
    pin: 32
    id: gpio_32_backlight_pwm

light:
  - platform: monochromatic
    output: gpio_32_backlight_pwm
    name: "Display Backlight"
    id: back_light
    default_transition_length: 2s
    #restore_mode: ALWAYS_ON

sensor:
- platform: uptime
  name: ${device_name}  Uptime
- platform: wifi_signal
  name: ${device_name}  Wi-Fi Signal
  update_interval: 60s
- platform: homeassistant
  entity_id: sensor.load_power
  id: load_power
- platform: homeassistant
  entity_id: sensor.total_dc_power
  id: dc_power
- platform: homeassistant
  entity_id: sensor.outdoor
  id: outdoor_temp  

binary_sensor:
- platform: homeassistant
  entity_id: binary_sensor.garage_open
  id: garage_open
- platform: homeassistant
  entity_id: binary_sensor.huvudentre_open
  id: entre_open
- platform: gpio
  id: button_a
  pin: 
    number: GPIO39
    inverted: true
  name: "Button A"
  filters:
    - delayed_off: 10ms
  on_press:
    - display.page.show_next: m5stack_display
- platform: gpio
  id: button_b
  pin: 
    number: GPIO38
    inverted: true
  name: "Button B"
  filters:
    - delayed_off: 10ms
- platform: gpio
  id: button_c
  pin: 
    number: GPIO37
    inverted: true
  name: "Button C"
  filters:
    - delayed_off: 10ms

time:
- platform: homeassistant
  id: my_time

#- platform: dallas
  # address: 0xe60008020babd110
  # name: "pico2 temp1"
# light:
#   - platform: rgb
#     name: RGB
#     red: r
#     green: g
#     blue: b

# output:
#   - platform: rp2040_pwm
#     id: r
#     pin: 2
#   - platform: rp2040_pwm
#     id: g
#     pin: 3
#   - platform: rp2040_pwm
#     id: b
#     pin: 4

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name} IP Address
    ssid:
      name: ${device_name} Wi-Fi SSID
    bssid:
      name: ${device_name} Wi-Fi BSSID
  - platform: version
    name: ${device_name} ESPHome Version
    hide_timestamp: false
  - platform: homeassistant
    entity_id: lock.garage
    id: sensor_garage_lock
  - platform: homeassistant
    entity_id: lock.huvudentre
    id: sensor_huvudentre_lock        
